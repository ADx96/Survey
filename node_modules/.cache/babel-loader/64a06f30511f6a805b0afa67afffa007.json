{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport instance from \"./Instance\";\n\nclass SurveyStore {\n  constructor() {\n    this.Questions = [];\n    this.Remarks = [];\n    this.isLoading = true;\n\n    this.GetQuestion = async () => {\n      try {\n        const response = await instance.get(\"/questions\");\n        runInAction(() => {\n          this.Questions = response.data;\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.SubmitQ1 = async QuestionData => {\n      try {\n        const response = await instance.post(\"/TransactionInsertFirst\", QuestionData);\n        runInAction(() => {\n          this.Questions.push(response.data);\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.SubmitOther = async QuestionData => {\n      try {\n        const response = await instance.post(`/TransactionInsertOther`, QuestionData);\n        runInAction(() => {\n          this.Questions.push(response.data);\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.SendRemarks = async QuestionData => {\n      try {\n        const response = await instance.post(`/TransactionRemarksInsert`, QuestionData);\n        runInAction(() => {\n          this.Remarks = response.data;\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n}\n\nconst surveyStore = new SurveyStore();\nexport default surveyStore;","map":{"version":3,"sources":["/Users/abood/Desktop/SurveyApp/src/Mobx/SurveyStore.tsx"],"names":["makeAutoObservable","runInAction","instance","SurveyStore","constructor","Questions","Remarks","isLoading","GetQuestion","response","get","data","error","console","SubmitQ1","QuestionData","post","push","SubmitOther","SendRemarks","surveyStore"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,WAAN,CAAkB;AAIhBC,EAAAA,WAAW,GAAG;AAAA,SAHdC,SAGc,GAHK,EAGL;AAAA,SAFdC,OAEc,GAFG,EAEH;AAAA,SADdC,SACc,GADF,IACE;;AAAA,SAIdC,WAJc,GAIA,YAAY;AACxB,UAAI;AACF,cAAMC,QAAa,GAAG,MAAMP,QAAQ,CAACQ,GAAT,CAAa,YAAb,CAA5B;AACAT,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKI,SAAL,GAAiBI,QAAQ,CAACE,IAA1B;AACA,eAAKJ,SAAL,GAAiB,KAAjB;AACD,SAHU,CAAX;AAID,OAND,CAME,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAda;;AAAA,SAgBdE,QAhBc,GAgBH,MAAOC,YAAP,IAA6B;AACtC,UAAI;AACF,cAAMN,QAAQ,GAAG,MAAMP,QAAQ,CAACc,IAAT,CACrB,yBADqB,EAErBD,YAFqB,CAAvB;AAIAd,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKI,SAAL,CAAeY,IAAf,CAAoBR,QAAQ,CAACE,IAA7B;AACA,eAAKJ,SAAL,GAAiB,KAAjB;AACD,SAHU,CAAX;AAID,OATD,CASE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KA7Ba;;AAAA,SA+BdM,WA/Bc,GA+BA,MAAOH,YAAP,IAA6B;AACzC,UAAI;AACF,cAAMN,QAAa,GAAG,MAAMP,QAAQ,CAACc,IAAT,CACzB,yBADyB,EAE1BD,YAF0B,CAA5B;AAIAd,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKI,SAAL,CAAeY,IAAf,CAAoBR,QAAQ,CAACE,IAA7B;AACA,eAAKJ,SAAL,GAAiB,KAAjB;AACD,SAHU,CAAX;AAID,OATD,CASE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KA5Ca;;AAAA,SA8CdO,WA9Cc,GA8CA,MAAOJ,YAAP,IAA6B;AACzC,UAAI;AACF,cAAMN,QAAa,GAAG,MAAMP,QAAQ,CAACc,IAAT,CACzB,2BADyB,EAE1BD,YAF0B,CAA5B;AAIAd,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKK,OAAL,GAAeG,QAAQ,CAACE,IAAxB;AACA,eAAKJ,SAAL,GAAiB,KAAjB;AACD,SAHU,CAAX;AAID,OATD,CASE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KA3Da;;AACZZ,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AANe;;AAkElB,MAAMoB,WAAW,GAAG,IAAIjB,WAAJ,EAApB;AAEA,eAAeiB,WAAf","sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport instance from \"./Instance\";\n\nclass SurveyStore {\n  Questions: any[] = [];\n  Remarks: any[] = [];\n  isLoading = true;\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  GetQuestion = async () => {\n    try {\n      const response: any = await instance.get(\"/questions\");\n      runInAction(() => {\n        this.Questions = response.data;\n        this.isLoading = false;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  SubmitQ1 = async (QuestionData: any) => {\n    try {\n      const response = await instance.post(\n        \"/TransactionInsertFirst\",\n        QuestionData\n      );\n      runInAction(() => {\n        this.Questions.push(response.data);\n        this.isLoading = false;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  SubmitOther = async (QuestionData: any) => {\n    try {\n      const response: any = await instance.post(\n        `/TransactionInsertOther`,\n        QuestionData\n      );\n      runInAction(() => {\n        this.Questions.push(response.data);\n        this.isLoading = false;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  SendRemarks = async (QuestionData: any) => {\n    try {\n      const response: any = await instance.post(\n        `/TransactionRemarksInsert`,\n        QuestionData\n      );\n      runInAction(() => {\n        this.Remarks = response.data;\n        this.isLoading = false;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nconst surveyStore = new SurveyStore();\n\nexport default surveyStore;\n"]},"metadata":{},"sourceType":"module"}